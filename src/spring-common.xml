<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!--1. 加载jdbc配置文件 -->
<!--  	<context:property-placeholder location="classpath*:jdbc.properties" />  -->
	
	 <!-- 引入jdbc配置文件 -->    
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
        <property name="locations">    
            <list>    
                <value>classpath*:jdbc.properties</value>    
            </list>    
        </property>    
    </bean> -->
    
      <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
 		<property name="driverClassName" value="${jdbc.driverClassName}"/> 
		<!-- 最大并发连接数 -->
 		<property name="maxActive" value="${jdbc.maxActive}"/> 
		<!-- 初始化连接数量 -->
 		<property name="initialSize" value="${jdbc.initialSize}"/> 
		<!-- 配置获取连接等待超时的时间 -->
 		<property name="maxWait" value="${jdbc.maxWait}"/> 
		<!-- 最小空闲连接数 -->
 		<property name="minIdle" value="${jdbc.minIdle}"/> 
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
 		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/> 
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
 		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/> 
 		<property name="validationQuery" value="${jdbc.validationQuery}"/> 
 		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/> 
 		<property name="testOnBorrow" value="${jdbc.testOnBorrow}"/> 
 		<property name="testOnReturn" value="${jdbc.testOnReturn}"/> 
 		<property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/> 
		<!-- 打开 removeAbandoned 功能 -->
 		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"/> 
		<!-- 1800 秒，也就是 30 分钟 -->
 		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/> 
		<!-- 关闭 abanded 连接时输出错误日志 -->
 		<property name="logAbandoned" value="${jdbc.logAbandoned}"/> 

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
 		<property name="filters" value="${jdbc.filters}" /> 
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
 		<property name="poolPreparedStatements" value="true" /> 
 		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> 
	</bean >

	<!-- 2.spring和mybatis整合，mybatis扫描映射文件	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 扫描model包 使用别名 -->
		<property name="typeAliasesPackage" value="com.tccp.model" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/tccp/mapper/*.xml"></property>
	</bean>

	<!-- 3. mybatis扫描接口所在的包-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tccp.mapper"></property>
 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property> 
	</bean>

	<!-- 4. 事务管理  dataSource:引用上面定义的数据源 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 5. 使用声明式事务。 引用上面定义的事务管理器 -->
	<tx:annotation-driven transaction-manager="txManager" />

</beans>
